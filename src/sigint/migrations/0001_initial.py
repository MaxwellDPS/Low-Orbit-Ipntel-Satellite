# Generated by Django 4.2.6 on 2023-10-15 21:30

from django.conf import settings
import django.core.files.storage.filesystem
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_results', '0011_taskresult_periodic_task_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
        #('durin', '0003_alter_authtoken_id_alter_client_id_and_more'),
        migrations.swappable_dependency("durin.client"),
    ]

    operations = [
        migrations.CreateModel(
            name='CIDRTagsList',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ListGenerator',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LookupRequest',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('queued', 'Queued ‚åõ'), ('in_progress', 'In Flight ‚úàÔ∏è'), ('success', 'Success ‚úÖ'), ('error', '[ERROR] Somethings on Fire üî•')], default='queued', max_length=255)),
                ('valid_lookups', models.IntegerField(blank=True, default=None, null=True)),
                ('invalid_lookups', models.JSONField(blank=True, default=None, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='GeoSync',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('celery_task_uuid', models.UUIDField(blank=True, null=True)),
                ('time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('in_progress', 'In Flight'), ('success', 'Success'), ('error', 'Its On Fire')], default='queued', max_length=255)),
                ('asn_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('city_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('country_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('error_info', models.TextField(blank=True, null=True)),
                ('latest', models.BooleanField(blank=True, null=True)),
                ('asn_file', models.FileField(blank=True, null=True, storage=django.core.files.storage.filesystem.FileSystemStorage, upload_to='asn')),
                ('city_file', models.FileField(blank=True, null=True, storage=django.core.files.storage.filesystem.FileSystemStorage, upload_to='city')),
                ('country_file', models.FileField(blank=True, null=True, storage=django.core.files.storage.filesystem.FileSystemStorage, upload_to='country')),
                ('celery_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='django_celery_results.taskresult')),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='AddressResult',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('valid_from', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Lookup Time')),
                ('valid_until', models.DateTimeField(blank=True, db_index=True, default=None, null=True, verbose_name='Lookup Validity Expires')),
                ('ip_address', models.GenericIPAddressField(blank=True, db_index=True, null=True, verbose_name='IP Address')),
                ('ip_version', models.CharField(blank=True, choices=[('4', 'IPv4'), ('6', 'IPv6')], db_index=True, max_length=3, null=True, verbose_name='IP Version')),
                ('autonomous_system_organization', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('autonomous_system_number', models.IntegerField(blank=True, db_index=True, null=True)),
                ('postal_code', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Postal Code')),
                ('postal_confidence', models.IntegerField(blank=True, default=0, null=True, verbose_name='Postal Code Confidence')),
                ('average_income', models.IntegerField(blank=True, null=True, verbose_name='Location Average Income')),
                ('accuracy_radius', models.IntegerField(blank=True, null=True, verbose_name='Accuracy Radius')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('population_density', models.IntegerField(blank=True, null=True, verbose_name='Population Density')),
                ('timezone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Timezone')),
                ('city_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='City')),
                ('city_confidence', models.IntegerField(blank=True, default=0, null=True, verbose_name='City Confidence')),
                ('metro_code', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Metro Code')),
                ('region_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='State / Region')),
                ('region_flag', models.CharField(blank=True, max_length=255, null=True, verbose_name='Region Flag')),
                ('region_code', models.CharField(blank=True, db_index=True, max_length=2, null=True)),
                ('region_confidence', models.IntegerField(blank=True, default=0, null=True, verbose_name='Region Confidence')),
                ('country_name', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='Country')),
                ('country_flag', models.CharField(blank=True, max_length=25, null=True, verbose_name='Country')),
                ('country_european_union', models.BooleanField(db_index=True, default=False, verbose_name='European Union')),
                ('country_code', models.CharField(blank=True, db_index=True, max_length=2, null=True)),
                ('country_confidence', models.IntegerField(blank=True, default=0, null=True, verbose_name='Country Confidence')),
                ('continent_name', models.CharField(blank=True, max_length=255, null=True)),
                ('continent_code', models.CharField(blank=True, max_length=2, null=True)),
                ('bogon', models.CharField(blank=True, max_length=255, null=True)),
                ('lookup', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='address_result_user_lookup', to='sigint.lookuprequest')),
                ('matches_lists', models.ManyToManyField(to='sigint.listgenerator')),
            ],
            options={
                'ordering': ['-valid_from'],
            },
        ),
        migrations.CreateModel(
            name='AccessPlan',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('expires', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('throttle_rate', models.IntegerField(blank=True, default=None, null=True)),
                ('allow_cidr_lookups', models.BooleanField(db_index=True, default=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='durin.client')),
                ('groups', models.ManyToManyField(to='auth.group')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
